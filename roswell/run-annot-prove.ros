#!/bin/sh
#|-*- mode:lisp -*-|#
#|
exec ros -Q -- $0 "$@"
|#

(unless (find-package :uiop)
  (ql:quickload :uiop :silent t))

(ql:quickload '(:prove :cl-annot-prove) :silent t)

(when (uiop:getenv "COVERALLS")
  (ql:quickload '(:cl-coveralls :split-sequence) :silent t))

(defun version ()
  (princ (asdf:component-version (asdf:find-system :cl-annot-prove)))
  (terpri)
  (uiop:quit -1))

(defun help ()
  (format t "~&Usage:
run-annot-prove [OPTIONS] [.asd files...]
run-annot-prove *.asd
run-annot-prove -p *.asd

OPTIONS:
  -h --help           Show this help.
  -v --version        Show version of cl-annot-prove.
  -p --with-prove     Run both annot.prove:run-system-tests and prove:run-test-system.
  -P --without-prove  Run annot.prove:run-system-tests, without prove:run-test-system (default).
")
  (uiop:quit -1))

(defun run (option-and-test-files)
  (labels ((run-tests (with-prove test-files)
             (not
              (some #'null
                    (mapcar (lambda (test-file)
                              (let ((test-file (pathname test-file)))
                                (unless (or (probe-file test-file)
                                            (string= (pathname-type test-file) "asd"))
                                  (error "~S is not an asd file." test-file))
                                (load test-file)
                                (let ((system (asdf:find-system (pathname-name test-file))))
                                  (and (annot.prove:run-system-tests system)
                                       (if with-prove
                                           (prove:run-test-system system)
                                           t)))))
                            test-files)))))
    (multiple-value-bind (with-prove test-files)
        (loop with with-prove
              with test-files
              for item in option-and-test-files
              do (cond
                   ((find item (list "-p" "--with-prove")
                          :test #'equal)
                    (setq with-prove t))
                   ((find item (list "-P" "--without-prove")
                          :test #'equal)
                    (setq with-prove nil))
                   (t (push item test-files)))
              finally (return (values with-prove test-files)))
      (or #.(if (uiop:getenv "COVERALLS")
                `(,(intern (string :with-coveralls) :coveralls)
                  (:exclude
                   (,(intern (string :split-sequence) :split-sequence)
                    #\: (or (uiop:getenv "COVERAGE_EXCLUDE") "")
                    :remove-empty-subseqs t))
                  (run-tests with-prove test-files))
                '(run-tests with-prove test-files))
          (uiop:quit -1)))))

(defun main (&rest args)
  (flet ((find-one-of (items list)
           (loop for item in items
                   thereis (find item list
                                 :test #'equal))))
    (cond
      ((or (null args)
           (find-one-of (list "-h" "--help") args))
       (help))
      ((find-one-of (list "-v" "--version") args)
       (version))
      (t (run args)))))
